Git环境初始配置
//显示颜色配置
git config --global color.ui true
//用户信息
git config --global user.name demo
git config --global user.email demo@mail.com
//初始化一个版本库
git init
//查看当前版本库状态
git status
//将某文件添加到暂存区
git add 文件名
//将暂存区的文件提交到当前分支
git commit -m "注释"

//查看版本记录
git log
//查看并简化版本记录显示
git log --pretty=oneline
//查看分支的合并情况
git log --graph --pretty=oneline --abbrev-commit
//查看版本变动记录
git reflog

时光穿梭
//回到上一个版本
git reset --hard HEAD^
//回到上上一个版本
git reset --hard HEAD^^
//回到上N个版本
git reset --hard HEAD~n
//回到具体版本
git reset --hard 版本号前7位
//撤销工作区的修改
git checkout -- 文件名（checkout这个命令还能切换分支，见后一段）
//撤销暂存区的修改
git reset HEAD readme.txt
//删除文件
rm——删除工作区的文件，可从版本库中恢复
git rm——从版本库中删除，不可恢复，git rm后还需git commit

//创建、删除与使用分支
//创建dev分支
git branch dev
//切换到dev分支
git checkout dev
//创建并切换到dev分支（常用）
git checkout -b dev
//查看当前分支
git branch
//将dev分支合并到当前分支
git merge dev
//删除dev分支
git branch -d dev

//远程仓库
//添加远程仓库（将本地版本库和远程库关联起来），origin是远程库的名字，GIT默认是origin，可改
git remote add origin git@gitee.com:MyGIT/demo.git
//查看远程仓库
git remote -v
//克隆远程仓库
git clone git@gitee.com:MyGIT/demo.git
//拉取远程仓库到本地master主分支
git pull origin master
//推送本地master分支到远程仓库
git push -u origin master（第一次推送）
git push origin master（后续推送不用加参数“u”）