Git环境初始配置
//显示颜色配置
git config --global color.ui true
//用户信息
git config --global user.name demo
git config --global user.email demo@mail.com
//初始化一个版本库
git init
//查看当前版本库状态
git status
//将某文件添加到暂存区
git add 文件名
//将暂存区的文件提交到当前分支
git commit -m "注释"

//查看版本记录
git log
//查看并简化版本记录显示
git log --pretty=oneline
//查看分支的合并情况
git log --graph --pretty=oneline --abbrev-commit
//查看版本变动记录
git reflog

时光穿梭
//回到上一个版本
git reset --hard HEAD^
//回到上上一个版本
git reset --hard HEAD^^
//回到上N个版本
git reset --hard HEAD~n
//回到具体版本
git reset --hard 版本号前7位
//撤销工作区的修改
git checkout -- 文件名（checkout这个命令还能切换分支，见后一段）
//撤销暂存区的修改
git reset HEAD readme.txt
//删除文件
rm——删除工作区的文件，可从版本库中恢复
git rm——从版本库中删除，不可恢复，git rm后还需git commit

//创建、删除与使用分支
//创建dev分支
git branch dev
//切换到dev分支
git checkout dev
//创建并切换到dev分支（常用）
git checkout -b dev
//查看当前分支
git branch
//将dev分支合并到当前分支（默认使用Fast forward模式）
git merge dev
//将dev分支合并到当前分支并禁用Fast forward模式（使用普通模式），BranchName是分支名字，因为禁用
//Fast forward模式会提交一个新的commit，所以需要使用注释参数-m。普通模式和Fast forward模式区别似乎（目前看来）就是前者能看得出做过合并，会显示在git log中，而后者则看不出来做过合并。
git merge --no-ff -m "***" BranchName
//删除dev分支
git branch -d dev
//分支策略
在实际开发中，应按几个基本原则进行分支管理：
（1）首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不应该在上面干活；
（2）干活应该都在自己新建的分支dev上，dev分支是不稳定的，到某个时候比如发布的时候再把dev分支合并到master分支上，团队中每个开发成员都有自己的dev分支，这样既能协同开发，又能减少相互干扰。
//bug分支
//修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除bug分支；
//当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
//对于“untrack”状态的文件（即新建但未add/commit的文件）在git stash之前一定要git add，不然不会被git系统管理，也就不会被stash。
//git stash的使用场景：设A为游戏软件 1、master 上面发布的是A的1.0版本 2、dev 上开发的是A的2.0版本 3、这时，用户反映 1.0版本存在漏洞，有人利用这个漏洞开外挂 4、需要从dev切换到master去填这个漏洞，正常必须先提交dev目前的工作，才能切换。 5、而dev的工作还未完成，不想提交，所以先把dev的工作stash一下。然后切换到master 6、在master建立分支issue101并切换. 7、在issue101上修复漏洞。 8、修复后，在master上合并issue101 9、切回dev，恢复原本工作，继续工作。
//注意：对于上述第4步，如果既未commit又未stash就切换到需要修复bug的分支，这是不安全也不推荐的，会有一些“隐患”，因此在切换之前需要commit或stash正在工作的分支上的内容。
//保存工作现场
git stash
//恢复工作现场
git stash apply
//删除stash
git stash drop
//恢复工作现场的同时并删除stash
git stash pop
//rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观；缺点是本地的分叉提交已经被修改过了。
//rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
git rebase

//远程仓库
//注意：github（远程仓库服务器）上不同项目对应的远程仓库名称是唯一的，和本地仓库一一对应
//添加远程仓库（将本地版本库和远程库关联起来），origin是远程库的名字，GIT默认是origin，可自行定义
git remote add origin git@gitee.com:MyGIT/demo.git
//查看远程仓库（简略信息）
git remote
//查看远程仓库（详细信息）
git remote -v
//删除远程仓库（并非真的删除github上的项目，只是把远程仓库名称删除，我们可以先删除原有远程库名称，再重新定义并关联新的仓库名称）
git remote rm 远程仓库名称
//克隆远程仓库
git clone git@gitee.com:MyGIT/demo.git
//拉取远程仓库的master分支并与当前本地分支合并
git pull origin master
//推送本地master分支到远程仓库
git push -u origin master（第一次推送）
git push origin master（后续推送不用加参数“u”）

//标签管理，注意：标签总是和某个commit挂钩，如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。
//查看所有标签
git tag
//新建一个标签，默认为HEAD，也可以指定一个commit id
git tag <tagname>
//指定（附加）标签信息
git tag -a <tagname> -m "……"
//删除本地标签
git tag -d <tagname>
//删除远程标签
git push origin :refs/tags/<tagname>
//推送本地标签
git push origin <tagname>
//推送全部未推送过的本地标签
git push origin --tags

//需要忽略某些文件（不提交到git仓库中，但又要放在工作目录下）时，可以通过编写.gitignore的方式解决
//.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理

//配置别名
git config --global alias.自定义的别名 git原有命令
例子：
git config --global alias.st status
git config --global alias.co checkout

//搭建自己的git服务器
1. 搭建Git服务器非常简单，通常10分钟即可完成；
2. 要方便管理公钥，用Gitosis；
3. 要像SVN那样变态地控制权限，用Gitolite。
